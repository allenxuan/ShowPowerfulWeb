apply plugin: 'com.android.library'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'ShowPowerfulWeb'

    publishedGroupId = 'com.github.allenxuan'
    libraryName = 'ShowPowerfulWeb'
    artifact = 'ShowPowerfulWeb'

    libraryDescription = 'This library is built for gorgeous display of web contents within your application. Specifically, it helps you launch the Chrome custom tabs when it\'s available.When Chrome custom tabs is not available, it helps you launch the FinestWebView which is a beautiful and customizable Android Activity that shows web pages within an app. \n' +
            '\n' +
            'You can say this library is a hybrid of the following two projects: \n' +
            'custom-tabs-client \n' +
            'FinestWebView-Android \n' +
            '\n' +
            'References: https://developer.chrome.com/multidevice/android/customtabs \n' +
            'https://github.com/GoogleChrome/custom-tabs-client \n' +
            'https://github.com/TheFinestArtist/FinestWebView-Android'

    siteUrl = 'https://github.com/allenxuan/ShowPowerfulWeb'
    gitUrl = 'https://github.com/allenxuan/ShowPowerfulWeb.git'

    libraryVersion = '0.5.0'

    developerId = 'allenxuan'
    developerName = 'Xuanyi Huang'
    developerEmail = 'allenxuan@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}




android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 5
        versionName "0.5.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:customtabs:23.1.1'
    compile 'com.thefinestartist:finestwebview:1.1.2'
}



//********************************************


//********************************************
apply plugin: 'com.github.dcendents.android-maven'

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}
//********************************************
apply plugin: 'com.jfrog.bintray'

version = libraryVersion

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {

}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}
//********************************************

